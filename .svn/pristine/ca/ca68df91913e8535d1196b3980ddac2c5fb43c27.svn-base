world = {}

local function worldThink()
	if not world.light or not world.time then return end
	
	local dayProgress = world.time.getDayProgress()
	local progress = math.sin(dayProgress * 2 * math.pi)

	local clampHeight = 0.5
	local clampedProgress = math.clamp(progress, 0, clampHeight) / clampHeight -- this needs to be adjusted so it is brightest at noon

	world.skyPainter.paintSky(dayProgress, clampedProgress)
	world.skyPainter.update()

	world.light.setBrightness(clampedProgress - 0.001)

	world.time.think() -- makes the time progress
end


local treeList = {
	"models/props_foliage/tree_poplar_01.mdl",
	"models/props_foliage/tree_deciduous_01a.mdl",
	"models/props_foliage/tree_deciduous_03a.mdl",
	"models/props_foliage/tree_deciduous_03b.mdl", 
}

local function create()
		local ent = classRenderEntry.new()
		ent.setPos(Vector(x, y, 0))
		ent.setAngles(Angle(0, math.randomf(0, 360), 0))
		ent.setModel("models/props_foliage/tree_deciduous_03b.mdl")

		--world.data.addEntry(ent)

	return ent 
end


function world.initialize()
	world.light = classLighting.new()
	world.skyPainter = classSkyPainter.new()

	world.time = classTime.new() -- Sets the world time to the time Object

	world.think = worldThink


	world.data = classRenderData.new()

	-- local ent = create()
	-- ent.setPos(Vector(50,35,0))
	-- world.data.addEntry(ent)


	-- local ent = create()
	-- ent.setPos(Vector(50,135,0))
	-- world.data.addEntry(ent)

	-- local ent = create()
	-- ent.setPos(Vector(50,235,0))
	-- world.data.addEntry(ent)

	-- local ent = create()
	-- ent.setPos(Vector(54,335,0))
	-- world.data.addEntry(ent)					
	for i = 1, 2000 do
		local ent = classRenderEntry.new()

		local x = math.randomf(-5000, 5000)
		local y = math.randomf(-5000, 5000)

		ent.setPos(Vector(x, y, 0))
		ent.setAngles(Angle(0, math.randomf(0, 360), 0))
		ent.setModel(table.Random(treeList))

		world.data.addEntry(ent)
	end	
end
concommand.Add("reloadworld", world.initialize)

