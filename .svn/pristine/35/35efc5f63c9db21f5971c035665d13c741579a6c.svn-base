
AddCSLuaFile( "cl_init.lua" )
AddCSLuaFile( "shared.lua" )
 
include('shared.lua')
include("controls.lua")

function ENT:Initialize()
    if self:GetModel() == nil or self:GetModel() == "models/error.mdl" then
        self:SetModel("models/Zombie/poison.mdl")
    end

    self.Entity:SetCollisionGroup( COLLISION_GROUP_NPC )
    self.Entity:SetCollisionBounds( Vector(-4,-4,0), Vector(4,4,64) ) // nice fat shaming

    self.loco:SetDeathDropHeight(400)   //default 200
    self.loco:SetAcceleration(1000)      //default 400
    self.loco:SetDeceleration(1000)      //default 400
    self.loco:SetStepHeight(18)         //default 18
    self.loco:SetJumpHeight(50)     //default 58

    if !IsValid(self.grave) then
        self.grave = ents.Create("prop_physics")
        self.grave:SetModel("models/props_c17/gravestone003a.mdl")
        self.grave:Spawn()

        local phys = self.grave:GetPhysicsObject()
        if IsValid(phys) then
            phys:SetMass(1000)
        end
    end

end

ENT.stuckPos = Vector(0,0,0)
ENT.times = 0
ENT.nextCheck = 0
local delay = 1
function ENT:BehaveUpdate( fInterval )

    if ( !self.BehaveThread ) then return end
    
    -- If you are not jumping yet and a player is close jump at them
    local modifier = 1
    if self:getRunning() then modifier = 2 end
    if self.nextCheck < CurTime() then
        if self.stuckPos:Distance(self:GetPos()) < 5 then
            self.times = self.times + 1
            if self.times > 3/modifier then
                self.loco:Jump()
                if self.times > 9/modifier then
                    self:SetPos(util.randRadius(self:GetPos(), 20, 20))
                    if self.times > 20/modifier then
                        self:Remove()
                    end
                end
            end
        else
            self.stuckPos = self:GetPos()
            self.times = 0
        end  
        self.nextCheck = CurTime() + delay
    end

    local ok, message = coroutine.resume( self.BehaveThread )
    if ( ok == false ) then

        self.BehaveThread = nil
        Msg( self, "error: ", message, "\n" );

    end
end
local nextthink = 0
function ENT:RunBehaviour()

    while ( true ) do
--        Find the player
        if self:CanRelease() then
            self:StartActivity( ACT_WALK )
            self.loco:SetDesiredSpeed( self:getWalkSpeed() )  

            local hiding = self:FindSpots({type = 'hiding', radius = 1000000, stepdown = 500, stepup = 500})   
            local desiredPos = hiding[1]["vector"]

            local origin = util.getPlayersOrigin(util.getAlivePlayers())
            if origin != nil then
                for index, data in pairs(hiding) do
                    if data["vector"]:Distance(origin) < desiredPos:Distance(origin) then
                        desiredPos = data["vector"]
                    end
                end
                self:MoveToPos( desiredPos ) -- walk to a random place within about 200 units (yielding)    
            end
            -- if math.random(1,4) == 1 then   
                self:ReleaseGrave()
            -- end  
            self:setWalkSpeed(self:getWalkSpeed() * 2)
        else            
            local target = nil
            for key, ply in pairs(player.GetAll()) do
                if ply:Alive() && (!IsValid(target) or ply:GetPos():Distance( self:GetPos() ) < target:GetPos():Distance(self:GetPos())) then
                    target = ply
                end
            end
            self:SetEnemy( target )
            local enemy = self:GetEnemy()
            -- if the position is valid
            if ( IsValid(enemy) ) then
                self.loco:SetDesiredSpeed( self:getWalkSpeed() )   
                self:StartActivity( ACT_WALK )    
                                                -- run speed    
                local options = {  lookahead = 300,
                                tolerance = 20,
                                draw = false,
                                maxage = 1,
                                repath = 0.1    }
                if !self:CanAttack( self:GetEnemy() ) then
                    self:MoveToEnemy( options )             
                else
                    self:AttackEnemy()
                end 
            else
                self:StartActivity( ACT_WALK )
                self.loco:SetDesiredSpeed( self:getWalkSpeed() )      
                self:MoveToPos( util.randRadius(self:GetPos(), 70, 150) ) -- walk to a random place within about 200 units (yielding)                           
            end
        end
        coroutine.yield()
    end

end

function ENT:OnLandOnGround()
    if self:getRunning() then
        self:StartActivity( ACT_RUN )             
    else
        self:StartActivity( ACT_WALK )    
    end
end

function ENT:Use( activator, caller, type, value )

end

ENT.grave = nil
function ENT:Think()
    if self:Health() >= 0 then
        if IsValid(self.grave) then
            if self.releasing then
                local BoneIndx = self:LookupBone("ValveBiped.Bip01")
                local BonePos , BoneAng = self:GetBonePosition( BoneIndx )

                self.grave:SetPos(BonePos + BoneAng:Right() * -10 + BoneAng:Up() * -10)
                self.grave:SetAngles(BoneAng + Angle(180,90,90))       
            else
                local BoneIndx = self:LookupBone("ValveBiped.Bip01_Spine")
                local BonePos , BoneAng = self:GetBonePosition( BoneIndx )

                self.grave:SetPos(BonePos + BoneAng:Forward() * 10 + BoneAng:Up() * -5)
                self.grave:SetAngles(BoneAng + Angle(120,0,160))
            end
        end
    end
end

function ENT:OnInjured(dmginfo)

end

function ENT:OnKilled( dmginfo )
    if IsValid(self.grave) then
        local phys = self.grave:GetPhysicsObject()
        if IsValid(phys) then
            phys:Wake()
            phys:ApplyForceCenter(dmginfo:GetDamageForce())
        end
        local grave = self.grave
        grave.dontTarget = true
        timer.Simple(30, function() if IsValid(grave) then grave:Remove() end end )
    end
    classAIDirector.npcDeath( self, dmginfo:GetAttacker(), dmginfo:GetInflictor() )
    self:BecomeRagdoll( dmginfo )

end 

function ENT:OnStuck( )

end

function ENT:HandleStuck()

    self.loco:ClearStuck()

end
