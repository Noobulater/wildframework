
-- This assembles all the objects into a nice simple table for the engine to use
local renderTable = {}

function prepareRenderTable()
	local pos = LocalPlayer():GetPos()

	renderTable = includeEntriesNear(pos)

	timer.Simple(1,function() prepareRenderTable() end)
end
concommand.Add("testRenderTable", function() PrintTable(renderTable) end)

local function initPost()
	if CLIENT then
		prepareRenderTable()
	end
end
hook.Add("InitPostEntity", "renderInit", initPost)

local function drawEntry( entry )
	local mdl = entry.getModel()
	local pos = entry.getPos()
	local ang = entry.getAngles()
	local solidDist = entry.getSolidDistance() or 300

	local distance = LocalPlayer():GetPos():Distance(pos)

	entry.getEnt():SetPos(pos)
	entry.getEnt():SetAngles(ang)
	entry.getEnt():SetNoDraw(false)
	if !entry.getStatic() && distance < solidDist then
		entry.getEnt():SetNoDraw(true)
	else
		prepareEntAlpha(entry.getEnt())			
	end	
end

function prepareEntAlpha( ent )
	local distance = LocalPlayer():GetPos():Distance(ent:GetPos())

	-- VDistance is used to determine if a prop is tall enough to alpha

	local vDistance = ent:GetPos().z - LocalPlayer():GetPos().z 
	local min, max = ent:GetCollisionBounds()
	local propHeight = max.z - min.z

	local alpha = 255	
	if ent:GetClass() == "prop_door_rotating" then 
		alpha = 255
	else
		if vDistance > -80 then	
			if vDistance > 80 then	
				if withinBox(ent:LocalToWorld(min), ent:LocalToWorld(max), LocalPlayer():GetPos()) then
					alpha = 40
				end		
			else
				if propHeight > 80 then
					alpha = math.Clamp(math.Round(255 * (distance/300)), 80, 255)
				end
			end	
		end
	end
	ent:SetColor( Color( 255, 255, 255, alpha))
end

function renderThink()
	if world.data == nil then world.initialize() print("worldData doesn't exist") return end
	renderDistance = 1000 + LocalPlayer():GetPos().z
	local entries = renderTable or nil

	-- Define locals, makes it cheapr
	local entry
	local pos
	local ang
	local distance

	local solidDist = 300

	for id, entryID in pairs(entries) do
		entry = world.data.getEntry(entryID)
		if entry != nil then
			pos = entry.getPos()
			ang = entry.getAngles()
			solidDist = entry.getSolidDistance() or solidDist

			distance = LocalPlayer():GetPos():Distance(pos)

			if distance < renderDistance then
				if !IsValid(entry.getEnt()) then
					entry.createEnt( )
				else								
					if distance < solidDist && (entry.cd == nil || entry.cd <= CurTime()) then 
						--timer.Simple((LocalPlayer():Ping() * 2.5)/1000, function() entry.getEnt():SetNoDraw(true) end) 
						RunConsoleCommand("solidify", entry.getUniqueID() ) 
						entry.cd = CurTime() + 1
					end
					drawEntry( entry, distance )
				end
			else
				if IsValid(entry.getEnt()) then
					entry.removeEnt()
				end
			end
		end
	end
end
hook.Add("Think", "renderHook", renderThink)

